import{_ as i,c as a,o as t,ag as e}from"./chunks/framework.CA5djfbr.js";const n="/Tutorial/images/docker_1.png",d="/Tutorial/images/docker_2.png",l="/Tutorial/images/docker_3.png",y=JSON.parse('{"title":"Docker 基础笔记","description":"","frontmatter":{},"headers":[],"relativePath":"tutorial/Docker/note.md","filePath":"tutorial/Docker/note.md","lastUpdated":1761061973000}'),h={name:"tutorial/Docker/note.md"};function k(p,s,o,r,c,g){return t(),a("div",null,[...s[0]||(s[0]=[e('<h1 id="docker-基础笔记" tabindex="-1">Docker 基础笔记 <a class="header-anchor" href="#docker-基础笔记" aria-label="Permalink to &quot;Docker 基础笔记&quot;">​</a></h1><h2 id="docker-安装" tabindex="-1">docker 安装 <a class="header-anchor" href="#docker-安装" aria-label="Permalink to &quot;docker 安装&quot;">​</a></h2><p>官网安装教程: <a href="https://docs.docker.com/engine/install/" target="_blank" rel="noreferrer">https://docs.docker.com/engine/install/</a></p><p>选择自己的系统进行安装</p><p>学会常用 <code>--help</code> 获取信息</p><h2 id="常见命令" tabindex="-1">常见命令 <a class="header-anchor" href="#常见命令" aria-label="Permalink to &quot;常见命令&quot;">​</a></h2><p>需要区分<code>镜像</code>和<code>容器</code>的概念 <code>镜像</code>: 一个模具,一个 docker 中不会有 2 个一模一样的镜像 <code>容器</code>: 使用镜像这个模具制作的东西,可以有很多功能一样的容器,但每个容器都有自己的属性</p><p><img src="'+n+`" alt="命令总结" loading="lazy"></p><h3 id="镜像命令" tabindex="-1">镜像命令 <a class="header-anchor" href="#镜像命令" aria-label="Permalink to &quot;镜像命令&quot;">​</a></h3><table tabindex="0"><thead><tr><th>命令</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>docker search</code></td><td>搜索<a href="https://hub.docker.com/" target="_blank" rel="noreferrer">镜像市场</a></td><td><code>OFFICIAL</code>带<code>[OK]</code>的是官方镜像</td></tr><tr><td><code>docker pull</code></td><td>下载镜像</td><td><code>docker pull nginx</code>: 默认下载最新版<br><code>docker pull nginx:1.26.0</code>: 下载指定版本</td></tr><tr><td><code>docker images</code></td><td>已下载镜像列表</td><td><code>docker images</code>或<code>docker image ls</code></td></tr><tr><td><code>docker rmi</code></td><td>删除镜像</td><td><code>docker rmi -f nginx</code>强制删除</td></tr></tbody></table><h3 id="容器命令" tabindex="-1">容器命令 <a class="header-anchor" href="#容器命令" aria-label="Permalink to &quot;容器命令&quot;">​</a></h3><table tabindex="0"><thead><tr><th>命令</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>docker run</code></td><td>使用镜像启动容器</td><td><code>docker run nginx</code> 如果没有这个镜像就会自动下载,而且会阻死控制台</td></tr><tr><td><code>docker ps</code></td><td>列出正在运行的容器</td><td><code>docker ps -a</code> 运行和停止的容器<br> <code>docker ps -aq</code> 只列出所有容器的 id</td></tr><tr><td><code>docker start</code></td><td>启动容器</td><td>可以使用容器的名字<code>NAMES</code>或者 id<code>CONTAINER ID</code>(可以只写前 3 位)</td></tr><tr><td><code>docker stop</code></td><td>停止容器</td><td>使用方法同上</td></tr><tr><td><code>docker restart</code></td><td>重启容器</td><td>使用方法同上</td></tr><tr><td><code>docker stats</code></td><td>容器资源占用</td><td>可查看实时 cpu,内存,网络,IO,使用方法同上</td></tr><tr><td><code>docker logs</code></td><td>容器运行日志</td><td>使用方法同上</td></tr><tr><td><code>docker exec</code></td><td>进入容器文件系统</td><td>使用方法同上</td></tr><tr><td><code>docker rm</code></td><td>删除容器</td><td>先停止再删除,也可以<code>docker rm -f 58e</code>强制删除<br>删除所有状态的容器: \`docker rm -f $(docker ps -aq)\`\`</td></tr><tr><td><code>docker inspect</code></td><td>显示容器详细信息</td><td><code>docker inspect nginx</code></td></tr></tbody></table><p><strong>重点</strong></p><p><code>docke run -d -p 88:80 --name mynginx nginx</code></p><ul><li><code>-d</code>: 后台启动</li><li><code>-p 88:80</code>: 端口映射,访问主机的 88 端口就是访问容器的 80 端口</li><li><code>--name mynginx</code>: 给容器取名为 mynginx</li></ul><p><code>docker exec -it mynginx /bin/bash</code></p><ul><li><code>-it</code>: 交互模式</li><li><code>mynginx</code>: 使用容器名称进入正在运容器的文件系统,也可以使用 id</li><li><code>/bin/bash</code>: 使用 bash 命令行,可以简写为 <code>bash</code></li><li>补充: <code>docker run -it nginx bash</code>使用 nginx 镜像创建一个容器,并进入容器的 bash 命令行,退出会停止容器</li></ul><blockquote><p>修改 nginx 默认页面内容,可以进入<code>/usr/share/nginx/html</code>中修改<code>index.html</code>的内容.<br> 容器内的系统非常轻量化,很多基本的命令都没有</p></blockquote><h3 id="保存镜像" tabindex="-1">保存镜像 <a class="header-anchor" href="#保存镜像" aria-label="Permalink to &quot;保存镜像&quot;">​</a></h3><table tabindex="0"><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>docker commit</code></td><td>提交,将容器制作成镜像</td></tr><tr><td><code>docker save</code></td><td>保存,将镜像打包为文件</td></tr><tr><td><code>docker load</code></td><td>加载,加载镜像文件</td></tr></tbody></table><p><strong><code>docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</code>: 将容器制作成镜像</strong></p><table tabindex="0"><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>-a</code></td><td>--author string 作者（例如，“John Hannibal Smith <a href="mailto:hannibal@a-team.com" target="_blank" rel="noreferrer">hannibal@a-team.com</a>”）</td></tr><tr><td><code>-c</code> <code>--change list</code></td><td>将 Dockerfile 指令应用于创建的镜像</td></tr><tr><td><code>-m</code> <code>--message string</code></td><td>提交消息</td></tr><tr><td><code>-p</code> <code>--pause</code></td><td>在提交期间暂停容器（默认为 true）</td></tr></tbody></table><ul><li>例如: <code>docker commit -m &#39;updata index.html&#39; mynginx mynginx:v1.0</code><ul><li><code>-m &#39;updata index.html&#39;</code>: 提交的消息</li><li><code>mynginx</code>: 容器名称,也可以使用 id</li><li><code>mynginx:v1.0</code>: 想要做成的镜像名称</li></ul></li></ul><p><strong><code>docker save [OPTIONS] IMAGE [IMAGE...]</code>: 将镜像打包为文件</strong></p><table tabindex="0"><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>-o</code>, <code>--output string</code></td><td>写入文件，而不是 STDOUT</td></tr><tr><td><code>--platform string</code></td><td>仅保存给定的平台变体。格式为 “os[/arch[/variant]]” （例如，“linux/amd64”）</td></tr></tbody></table><ul><li>例如: <code>docker save -o mynginx.tar mynginx:v1.0</code><ul><li><code>-o mynginx.tar</code>: 保存为<code>mynginx.tar</code>文件</li><li><code>mynginx:v1.0</code>: 需要被保存的镜像</li></ul></li></ul><p><strong><code>docker load [OPTIONS]</code>: 加载镜像文件</strong></p><table tabindex="0"><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>-i</code>, <code>--input string</code></td><td>从 tar 存档文件读取，而不是 STDIN</td></tr><tr><td><code>--platform string</code></td><td>仅加载给定的平台变体。格式为 “os[/arch[/variant]]” （例如，“linux/amd64”）</td></tr><tr><td><code>-q</code>, <code>--quiet</code></td><td>抑制负载输出</td></tr></tbody></table><ul><li>例如: <code>docker load -i mynginx.tar</code><ul><li><code>-i mynginx.tar</code>: 加载指定的 mynginx.tar 包</li></ul></li></ul><h3 id="分享社区" tabindex="-1">分享社区 <a class="header-anchor" href="#分享社区" aria-label="Permalink to &quot;分享社区&quot;">​</a></h3><p>官网:<a href="https://www.docker.com/" target="_blank" rel="noreferrer">https://www.docker.com/</a></p><table tabindex="0"><thead><tr><th>命令</th><th>说明</th><th>用法</th></tr></thead><tbody><tr><td><code>docker login</code></td><td>登录</td><td><code>docker login -u &lt;username&gt;</code></td></tr><tr><td><code>docker tag</code></td><td>命名</td><td><code>docker tag 原镜像名 目标镜像名</code>(记得加版本号)</td></tr><tr><td><code>docker push</code></td><td>推送</td><td><code>docker push [OPTIONS] NAME[:TAG]</code></td></tr></tbody></table><h2 id="存储" tabindex="-1">存储 <a class="header-anchor" href="#存储" aria-label="Permalink to &quot;存储&quot;">​</a></h2><p>容器运行时有自己的文件系统和环境,在容器里面修改或增加文件并不方便,而且一旦销毁容器,里面的数据也会消失,所以需要将主机的文件和容器的文件进行一种关联,操作主机的文件也就能操作容器的文件</p><h3 id="目录挂载" tabindex="-1">目录挂载 <a class="header-anchor" href="#目录挂载" aria-label="Permalink to &quot;目录挂载&quot;">​</a></h3><p><code>-v ~/app/nghtml:/usr/share/nginx/html</code></p><ul><li>完整用法: <code>docke run -d -p 88:80 -v ~/app/nghtml:/usr/share/nginx/html --name mynginx nginx</code></li><li>在启动时,增加挂载参数,使主机的<code>~/app/nghtml</code>和<code>/usr/share/nginx/html</code>形成关联,修改任何一个都会使另一个同步改变</li><li>如果主机没有<code>~/app/nghtml</code>文件夹会自动创建,并且容器中的<code>/usr/share/nginx/html</code>文件夹也是空的</li><li>不适用于需要默认配置启动的容器,因为挂载会清除所有原的数据,以空文件夹开始</li></ul><h3 id="卷映射" tabindex="-1">卷映射 <a class="header-anchor" href="#卷映射" aria-label="Permalink to &quot;卷映射&quot;">​</a></h3><p><code>-v ngconf:/etc/nginx</code></p><ul><li>完整用法: <code>docker run -d -p 88:80 -v ngconf:/etc/nginx --name mynginx nginx</code></li><li><code>ngconf</code> 自定义的卷名,不是文件夹,启动后会与<code>/etc/nginx</code>里的初始配置一致,修改任何一个都会使另一个同步改变</li><li>自定义的卷统一在 <code>var/lib/docker/volumes/&lt;volume-name&gt;</code>目录下</li><li><code>docker volume ls</code> 列出所有卷</li><li><code>docker volume creat &lt;name&gt;</code> 创建一个卷</li><li><code>docker volume inspect &lt;name&gt;</code> 查看一个卷的详情</li></ul><h2 id="网络" tabindex="-1">网络 <a class="header-anchor" href="#网络" aria-label="Permalink to &quot;网络&quot;">​</a></h2><h3 id="docker-ip-访问" tabindex="-1">docker ip 访问 <a class="header-anchor" href="#docker-ip-访问" aria-label="Permalink to &quot;docker ip 访问&quot;">​</a></h3><ul><li>每个 docker 容器启动都会加入 docker 的默认网络<code>docker0</code>,使用 <code>ip a</code>查看所有网络</li><li><code>docker container inspect &lt;name&gt;</code> 或者 <code>docker inspect &lt;name&gt;</code>可以查看一个容器的细节,其中<code>IPAddress</code>就是这个容器的 ip 地址,容器和容器之间可以通过对方的这个 ip+容器端口进行数据互访</li><li>但是这种方法 ip 可能会变化</li></ul><h3 id="自定义网络" tabindex="-1">自定义网络 <a class="header-anchor" href="#自定义网络" aria-label="Permalink to &quot;自定义网络&quot;">​</a></h3><ul><li><code>docker0</code> 不支持主机域名,需要自定义一个网络,容器启动加入这个网络,容器的名称就是稳定的域名</li><li><code>docker network &lt;COMMAND&gt;</code><table tabindex="0"><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>connect</code></td><td>Connect a container(容器) to a network</td></tr><tr><td><code>create</code></td><td>Create a network</td></tr><tr><td><code>disconnect</code></td><td>Disconnect a container from a network</td></tr><tr><td><code>inspect</code></td><td>Display(显示) detailed(详细) information(信息) on one or more networks</td></tr><tr><td><code>ls</code></td><td>List networks</td></tr><tr><td><code>prune</code>(修剪)</td><td>Remove all unused(未使用) networks</td></tr><tr><td><code>rm</code></td><td>Remove one or more networks</td></tr></tbody></table></li><li><code>docker network creat mynet</code> 创建名为<code>mynet</code>的自定义网络</li><li><code>docker run -d -p 88:80 --network mynet --name mynginx nginx</code> 使用自定义网络启动容器,同一个网络中的其他容器应用就可以通过<code>http://mynginx:80</code>访问这个容器应用了</li></ul><h2 id="compose-文件" tabindex="-1">compose 文件 <a class="header-anchor" href="#compose-文件" aria-label="Permalink to &quot;compose 文件&quot;">​</a></h2><ol><li>默认文件名是<code>compose.yaml</code></li><li>这个文件的作用就是批量启动容器</li></ol><h3 id="compose-命令" tabindex="-1">compose 命令 <a class="header-anchor" href="#compose-命令" aria-label="Permalink to &quot;compose 命令&quot;">​</a></h3><table tabindex="0"><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>docker compose up -d</code></td><td>上线,<code>docker compose -f &lt;filename&gt; up -d</code>指定文件启动,不指定就是默认使用<code>compose.yaml</code></td></tr><tr><td><code>docker compose down</code></td><td>下线</td></tr><tr><td><code>docker compose start &lt;name1&gt; &lt;name2&gt;</code></td><td>指定启动已停止的容器</td></tr><tr><td><code>docker compose stop &lt;name1&gt; &lt;name2&gt;</code></td><td>指定停止已启动的容器</td></tr><tr><td><code>docker compose scale &lt;name2&gt;=3</code></td><td>扩容指定的容器至指定的数量</td></tr></tbody></table><h3 id="compose-用法示例" tabindex="-1">compose 用法示例 <a class="header-anchor" href="#compose-用法示例" aria-label="Permalink to &quot;compose 用法示例&quot;">​</a></h3><p>下面以启动一个 mysql 和 wordpress 服务为例(wordpress 博客网站),编写一个 compose.yaml 文件来一键同时启动 2 个服务</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#创建网络</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> network</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> blog</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#启动mysql</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 3306:3306</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-e </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">MYSQL_ROOT_PASSWORD=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123456</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-e </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">MYSQL_DATABASE=wordpress</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-v </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mysql-data:/var/lib/mysql</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-v </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">~/app/mysql/myconf:/etc/mysql/conf.d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--restart </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">always</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--name </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mysql</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--network </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">blog</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysql:8.0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#启动wordpress</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8080:80</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-e </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">WORDPRESS_DB_HOST=mysql</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-e </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">WORDPRESS_DB_USER=root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-e </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">WORDPRESS_DB_PASSWORD=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123456</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-e </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">WORDPRESS_DB_NAME=wordpress</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-v </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">wordpress:/var/www/html</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--restart </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">always</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--name </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">wordpress-app</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--network </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">blog</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wordpress:latest</span></span></code></pre></div><blockquote><p><code>-e</code> 环境变量 <code>--restart always</code> 开机自启</p></blockquote><h3 id="compose-yaml" tabindex="-1">compose.yaml <a class="header-anchor" href="#compose-yaml" aria-label="Permalink to &quot;compose.yaml&quot;">​</a></h3><p>compose <a href="https://docs.docker.com/reference/compose-file/" target="_blank" rel="noreferrer">语法参考</a></p><p>compose 结构</p><p><img src="`+d+`" alt="compose结构" loading="lazy"></p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">myblog</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 顶层元素,这里是服务的名称</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 顶层元素</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  mysql</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启动的mysql容器名称,可以自定义,这个元素下就写run启动命令下的参数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # container_name: mysql01 # 定义容器的名称,如果不定义,就默认使用上一级定义的名称mysql</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mysql:8.0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 使用的镜像</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 端口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;88:80&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 数组形式</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 环境变量,有2中写法,可以加 - 也可以不加</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">MYSQL_ROOT_PASSWORD=123456</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 数据库密码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">MYSQL_DATABASE=wordpres</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 数据库名称</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果使用了卷映射,后还需要到volumes的顶级元素中再次声明</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mysql-data:/var/lib/mysql</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 卷映射,这里还需要到volumes的顶级元素中再次声明</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">~/app/mysql/myconf:/etc/mysql/conf.d</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 目录挂载</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    network</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 网络</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">blog</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 加入blog网络</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    restart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">always</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 总是重启,开机自启</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  wordpress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启动的wordpress的容器名称,可以自定义</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">wordpress</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;8080:80&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">WORDPRESS_DB_HOST=mysql</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # ip,这里使用域名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">WORDPRESS_DB_USER=root</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # mysql用户名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">WORDPRESS_DB_PASSWORD=123456</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # mysql密码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">WORDPRESS_DB_NAME=wordpres</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # mysql名称</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">wordpress:/var/www/html</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    networks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">blog</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    restart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">always</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    depends_on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 依赖项,这里workpress的启动依赖于mysql,所以需要mysql启动后再安装</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mysql</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">networks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 顶层元素</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  blog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 需要加入的网络,下面还可以再配置</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 顶层元素</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  mysql-data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这里再次声明卷,下面还可以再配置卷的其他属性</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  wordpress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span></code></pre></div><h3 id="compose-命令详解" tabindex="-1">compose 命令详解 <a class="header-anchor" href="#compose-命令详解" aria-label="Permalink to &quot;compose 命令详解&quot;">​</a></h3><p>执行 <code>docker compose up -d</code> 程序会按照下面的顺序构建,构建的容器名称,卷名称,网络名称都会带有服务名称的前缀 <img src="`+l+`" alt="构建结果" loading="lazy"> 执行<code>docker compose dowm</code>会停止并删除 compose 内的所有容器,并删除所在网络,但会保留目录挂载和卷映射,方便下一次启动</p><p><strong><code>docker compose dowm</code> 的用法</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Usage:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> down</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [OPTIONS] [SERVICES]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Stop</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> and</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remove</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> containers,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> networks</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Options:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      --dry-run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          Execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">执行</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">command</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dry</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">试运行模式</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      --remove-orphans</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   Remove</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> containers</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> services</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> not</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> defined</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      --rmi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       Remove</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> images</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> used</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> by</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> services.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;local&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remove</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> only</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> images</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> that</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> don&#39;t have a custom tag</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                         (&quot;local&quot;|&quot;all&quot;)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  -t, --timeout int      Specify(指定) a shutdown timeout in seconds</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  -v, --volumes          Remove named(命名的) volumes declared(声明) in the &quot;volumes&quot; section(部分) of the Compose file and anonymous(匿名)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                         volumes attached(附加) to containers</span></span></code></pre></div><p><code>docker compose down --rmi all -v</code>: 删除 compose 中的所有镜像,容器,网络,目录挂载和卷</p><h2 id="dockerfile" tabindex="-1">dockerfile <a class="header-anchor" href="#dockerfile" aria-label="Permalink to &quot;dockerfile&quot;">​</a></h2><p>官方<a href="https://docs.docker.com/reference/dockerfile/" target="_blank" rel="noreferrer">文档地址</a><code>docker commit</code> 是将容器制作成镜像,再使用<code>docker save</code>打包成文件 <code>dockerfile</code>是直接使用脚本文件(相当于命令的集合),再使用<code>docker bulid</code>直接构建一个镜像</p>`,65)])])}const F=i(h,[["render",k]]);export{y as __pageData,F as default};
